
********************************************************************************************************
 -  AJOUT DROP-DOWN MENU dans NAVBAR
download (puis mettre dans /lib)
    ui-bootstrap-tpls.min.js
ajout ds INDEX.HTML de :
    <script src="lib/ui-bootstrap-tpls.min.js"></script>
ajouter DEPENDANCE "ui.bootstrap" dans controllers.js :
    angular.module('controllers', ['services', 'ngDragDrop', "ui.bootstrap"]);
puis voir exemple <li class="dropdown"> dans navbar.html



********************************************************************************************************
  - DRAG & DROP by codeformer

(http://codef0rmer.github.io/angular-dragdrop/)

download (puis mettre dans /lib)
    angular-dragdrop.js
ajout ds index.html de :
    <script src="lib/angular-dragdrop.js"></script>
ajouter dependance "ngDragDrop" dans controller.js :
  angular.module('controllers', ['services', 'ngDragDrop', "ui.bootstrap"]);
puis voir exemples (planningToFill.html...etc)

Differentes fonctionnalites

jqyoui-draggable="{index: {{$index}},placeholder:'keep', deepCopy:true}"
options visible dans le liens ci dessus!

deepCopy (true or false) permet de faire une copy de l'obj, le nouvel objet n'aura ainsi pas la mm reference que l'initial.
placeholder (keep, true or false) indique si l'objet restera egalement dans la source
                            Sans le 'deepcopy' lobjet resté a la source partagera la reference de l'obj dans le drop
                            false laisse aucune trace à la source tandis que true laisse un objet vide : {}
il est egalement possible d'avoir 2x le meme element dans la cible sans avoir fait un deepCopy depuis la source :
=> 'track by $index' ex planningToFill.html : '<div ng-repeat="recipe in meal.recipes track by $index>'
permet ainsi de differencier les 2 meme elements et de pouvoir les afficher!

data-jqyoui-options="{revert: 'invalid', helper:'clone'}"
options de jquery (http://api.jqueryui.com/draggable/)
revert : indique si l'element reviendra a sa place (animation visuelle)
    true/false : reviendra toujours/jamais
    invalid/valid : reviendra si drop non valid / inverse
helper : "original" or "clone" permet de cloner ou non l'elem to drag (ou possible fonction) cf doc jquery...



********************************************************************************************************
  - COPIER OBJET

ex de copie de l'obj 'ingr' dans newIngr :
var newIngr = JSON.parse(JSON.stringify(ingr));//NEW OBJECT
cf. $scope.addIngredientList (customizeShopping-controller.js)



********************************************************************************************************
 - STRUCTURE PLANNING

 HTML :
 planning.html est divisé en 3 html
    - recipesPlanning.html qui permet de choisir ses recipes à glisser dans le planning
    - planningToFill.html : le planning en lui meme où on glisse les recettes
    - listShopping.html est le module de calcul où un fois le planning remplie on peut calculer la list de shopping correspondante

 LA DIVISION en 3 parties HTML est faite grace aux directives  dans "creationPlanning-directive.js"   (cf. explication ci-dessous)

 JS :
    - planning-controller.js englobe tout le html (ng-controller="PlanningCtrl" dans planning.html)
    - listShopping-controller.js , fils de planning-controller englobe listShopping.html (ou l'on trouve donc ng-controller="ListShoppingCtrl")
    - customizeShopping-controller.js, fils de listShopping est egalement dans listShopping.html (on l'on trouve donc ng-controller="CustomizeShoppingCtrl")



********************************************************************************************************
 - DIVISION HTML avec DIRECTIVES

 dans planning.html nous avons 3 directives :
    <recipes-planning></recipes-planning>
    <planning-tofill></planning-tofill>
    <list-shopping></list-shopping>

    ATTENTION il est important d'avoir UN SEUL <DIV> dans chacun des fichier.html...

Elles sont appelées dans "creationPlanning-directive.js"


ajout ds >>> INDEX.HTML <<< de :
    <script src="js/Directives/creationPlanning-directive.js"></script>

DEPENDANCE :
    - pas vraiment de dependance, juste utiliser le module 'controllers' et creer les directives
      => dans creationPlanning-directive.js :
      var myModule = angular.module('controllers');
      myModule.directive('recipesPlanning', function(){...}

     OU

    - creer directives.js qui contient : angular.module('directives', []);
      ajouter dependance "directives" dans controllers.js :
          angular.module('controllers', ['directives','services', 'ngDragDrop', "ui.bootstrap"]);
          => dans creationPlanning-directive.js :
          var myDirective = angular.module('directives');
          myDirective.directive('recipesPlanning', function(){...}
      ajout ds INDEX.HTML : <script src="js/Directives/directives.js"></script>


==> la seconde solution est la meilleure !!!



********************************************************************************************************
    DIRECTIVES - ELEMENT modification functions

    A good example to modify an element is when we scroll into recipes and then the leftNavBar is fixed
    This is done thanks to a directive called "scrollFixedPosition"
    => recipe.html & recipe-controller.js (directive)
    And in the directive the element is modify by changing the CSS and the className

    EVERY functiuons on element can be found here :
    https://docs.angularjs.org/api/ng/function/angular.element
    => Angular's jqLite



********************************************************************************************************
 - GLYPHICON (http://getbootstrap.com/components/)

<span   class="glyphicon glyphicon-search " ></span>




********************************************************************************************************
  - WATCH


 ex : $scope.$watch('showImprovement', toggleImpr);

 ATTENTION WATCH NE FONCTIONNE PAS sur les $scope pour les FONCTIONS
  => $scope.toggleImpr = function(){...} //NE FONCTIONNE PAS
     var toggleImpr = function(){...} //FONCTIONNE!



 ********************************************************************************************************
   - AWSOME CHECKBOXES

   https://github.com/flatlogic/awesome-bootstrap-checkbox


   FORMATTAGE IMPORTANT :
    - SPAN avec la classe "checkbox checkbox-info" qui contient :
            - un INPUT suivi d'un LABEL est necessaire, avec le MEME id pour les deux

    EX :
     <span class="checkbox checkbox-warning" >
             <input type="checkbox"  ng-model="showDebug"  id="idShowDebug" ng-change="toggleDebug()">
             <label for="idShowDebug" >
                 SHOW DEBUG
             </label>
     </span>



 ********************************************************************************************************
   - ROUTE PARAMS

   ex de $routeParams dans recipe-controller.js


 ********************************************************************************************************
   - EMIT BROADCAST &

   ex de $broadcast-$on entre listShopping.js & customizeShopping.js
   ex de $emit-$on entre ..planning-controller.js & global-controller.js


 ********************************************************************************************************
   - BUG EXPENSES -> INFINITE LOOP   in creationTabCouple()

   => add the stop condition !isTooSmall
where isTooSmall = zeroFive.toFixed(1) > Math.abs(tabExpense[indexMax]).toFixed(1);

L'exemple qui a permis de deceller ce bug :
fab 30€ to fab & carine
fab 15€ to math, eddy, carine
fab 40€ to fab, math, eddy, carine, person4, person5

********************************************************************************************************
    CHECKBOX size... cf(notesCSS.txt)
    *********************************